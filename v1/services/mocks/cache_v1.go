// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CacheV1 is an autogenerated mock type for the cacheV1 type
type CacheV1 struct {
	mock.Mock
}

type CacheV1_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheV1) EXPECT() *CacheV1_Expecter {
	return &CacheV1_Expecter{mock: &_m.Mock}
}

// ClearMultipleCacheKey provides a mock function with given fields: ctx, key
func (_m *CacheV1) ClearMultipleCacheKey(ctx context.Context, key ...string) error {
	_va := make([]interface{}, len(key))
	for _i := range key {
		_va[_i] = key[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClearMultipleCacheKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, key...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheV1_ClearMultipleCacheKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearMultipleCacheKey'
type CacheV1_ClearMultipleCacheKey_Call struct {
	*mock.Call
}

// ClearMultipleCacheKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key ...string
func (_e *CacheV1_Expecter) ClearMultipleCacheKey(ctx interface{}, key ...interface{}) *CacheV1_ClearMultipleCacheKey_Call {
	return &CacheV1_ClearMultipleCacheKey_Call{Call: _e.mock.On("ClearMultipleCacheKey",
		append([]interface{}{ctx}, key...)...)}
}

func (_c *CacheV1_ClearMultipleCacheKey_Call) Run(run func(ctx context.Context, key ...string)) *CacheV1_ClearMultipleCacheKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *CacheV1_ClearMultipleCacheKey_Call) Return(_a0 error) *CacheV1_ClearMultipleCacheKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheV1_ClearMultipleCacheKey_Call) RunAndReturn(run func(context.Context, ...string) error) *CacheV1_ClearMultipleCacheKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataFromCache provides a mock function with given fields: ctx, key
func (_m *CacheV1) GetDataFromCache(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetDataFromCache")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheV1_GetDataFromCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataFromCache'
type CacheV1_GetDataFromCache_Call struct {
	*mock.Call
}

// GetDataFromCache is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *CacheV1_Expecter) GetDataFromCache(ctx interface{}, key interface{}) *CacheV1_GetDataFromCache_Call {
	return &CacheV1_GetDataFromCache_Call{Call: _e.mock.On("GetDataFromCache", ctx, key)}
}

func (_c *CacheV1_GetDataFromCache_Call) Run(run func(ctx context.Context, key string)) *CacheV1_GetDataFromCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CacheV1_GetDataFromCache_Call) Return(_a0 []byte, _a1 error) *CacheV1_GetDataFromCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheV1_GetDataFromCache_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *CacheV1_GetDataFromCache_Call {
	_c.Call.Return(run)
	return _c
}

// SetDataToCache provides a mock function with given fields: ctx, key, value
func (_m *CacheV1) SetDataToCache(ctx context.Context, key string, value []byte) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetDataToCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheV1_SetDataToCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataToCache'
type CacheV1_SetDataToCache_Call struct {
	*mock.Call
}

// SetDataToCache is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value []byte
func (_e *CacheV1_Expecter) SetDataToCache(ctx interface{}, key interface{}, value interface{}) *CacheV1_SetDataToCache_Call {
	return &CacheV1_SetDataToCache_Call{Call: _e.mock.On("SetDataToCache", ctx, key, value)}
}

func (_c *CacheV1_SetDataToCache_Call) Run(run func(ctx context.Context, key string, value []byte)) *CacheV1_SetDataToCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *CacheV1_SetDataToCache_Call) Return(_a0 error) *CacheV1_SetDataToCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheV1_SetDataToCache_Call) RunAndReturn(run func(context.Context, string, []byte) error) *CacheV1_SetDataToCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheV1 creates a new instance of CacheV1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheV1(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheV1 {
	mock := &CacheV1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
