// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "sns-barko/v1/entities"

	mock "github.com/stretchr/testify/mock"

	models "sns-barko/v1/models"
)

// RepoV1Interface is an autogenerated mock type for the repoV1Interface type
type RepoV1Interface struct {
	mock.Mock
}

type RepoV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoV1Interface) EXPECT() *RepoV1Interface_Expecter {
	return &RepoV1Interface_Expecter{mock: &_m.Mock}
}

// AutoMigrate provides a mock function with given fields: ctx
func (_m *RepoV1Interface) AutoMigrate(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AutoMigrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_AutoMigrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoMigrate'
type RepoV1Interface_AutoMigrate_Call struct {
	*mock.Call
}

// AutoMigrate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RepoV1Interface_Expecter) AutoMigrate(ctx interface{}) *RepoV1Interface_AutoMigrate_Call {
	return &RepoV1Interface_AutoMigrate_Call{Call: _e.mock.On("AutoMigrate", ctx)}
}

func (_c *RepoV1Interface_AutoMigrate_Call) Run(run func(ctx context.Context)) *RepoV1Interface_AutoMigrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RepoV1Interface_AutoMigrate_Call) Return(_a0 error) *RepoV1Interface_AutoMigrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_AutoMigrate_Call) RunAndReturn(run func(context.Context) error) *RepoV1Interface_AutoMigrate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFriendRequest provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) CreateFriendRequest(ctx context.Context, model models.Friend) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for CreateFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Friend) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_CreateFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFriendRequest'
type RepoV1Interface_CreateFriendRequest_Call struct {
	*mock.Call
}

// CreateFriendRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Friend
func (_e *RepoV1Interface_Expecter) CreateFriendRequest(ctx interface{}, model interface{}) *RepoV1Interface_CreateFriendRequest_Call {
	return &RepoV1Interface_CreateFriendRequest_Call{Call: _e.mock.On("CreateFriendRequest", ctx, model)}
}

func (_c *RepoV1Interface_CreateFriendRequest_Call) Run(run func(ctx context.Context, model models.Friend)) *RepoV1Interface_CreateFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Friend))
	})
	return _c
}

func (_c *RepoV1Interface_CreateFriendRequest_Call) Return(_a0 error) *RepoV1Interface_CreateFriendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_CreateFriendRequest_Call) RunAndReturn(run func(context.Context, models.Friend) error) *RepoV1Interface_CreateFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) CreatePost(ctx context.Context, model models.Post) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Post) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type RepoV1Interface_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Post
func (_e *RepoV1Interface_Expecter) CreatePost(ctx interface{}, model interface{}) *RepoV1Interface_CreatePost_Call {
	return &RepoV1Interface_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, model)}
}

func (_c *RepoV1Interface_CreatePost_Call) Run(run func(ctx context.Context, model models.Post)) *RepoV1Interface_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Post))
	})
	return _c
}

func (_c *RepoV1Interface_CreatePost_Call) Return(_a0 error) *RepoV1Interface_CreatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_CreatePost_Call) RunAndReturn(run func(context.Context, models.Post) error) *RepoV1Interface_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) CreateUser(ctx context.Context, model models.User) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type RepoV1Interface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.User
func (_e *RepoV1Interface_Expecter) CreateUser(ctx interface{}, model interface{}) *RepoV1Interface_CreateUser_Call {
	return &RepoV1Interface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, model)}
}

func (_c *RepoV1Interface_CreateUser_Call) Run(run func(ctx context.Context, model models.User)) *RepoV1Interface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *RepoV1Interface_CreateUser_Call) Return(_a0 error) *RepoV1Interface_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_CreateUser_Call) RunAndReturn(run func(context.Context, models.User) error) *RepoV1Interface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFriend provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) DeleteFriend(ctx context.Context, model models.Friend) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Friend) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_DeleteFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFriend'
type RepoV1Interface_DeleteFriend_Call struct {
	*mock.Call
}

// DeleteFriend is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Friend
func (_e *RepoV1Interface_Expecter) DeleteFriend(ctx interface{}, model interface{}) *RepoV1Interface_DeleteFriend_Call {
	return &RepoV1Interface_DeleteFriend_Call{Call: _e.mock.On("DeleteFriend", ctx, model)}
}

func (_c *RepoV1Interface_DeleteFriend_Call) Run(run func(ctx context.Context, model models.Friend)) *RepoV1Interface_DeleteFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Friend))
	})
	return _c
}

func (_c *RepoV1Interface_DeleteFriend_Call) Return(_a0 error) *RepoV1Interface_DeleteFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_DeleteFriend_Call) RunAndReturn(run func(context.Context, models.Friend) error) *RepoV1Interface_DeleteFriend_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLike provides a mock function with given fields: ctx, model, like
func (_m *RepoV1Interface) DeleteLike(ctx context.Context, model models.Post, like entities.Like) error {
	ret := _m.Called(ctx, model, like)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Post, entities.Like) error); ok {
		r0 = rf(ctx, model, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_DeleteLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLike'
type RepoV1Interface_DeleteLike_Call struct {
	*mock.Call
}

// DeleteLike is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Post
//   - like entities.Like
func (_e *RepoV1Interface_Expecter) DeleteLike(ctx interface{}, model interface{}, like interface{}) *RepoV1Interface_DeleteLike_Call {
	return &RepoV1Interface_DeleteLike_Call{Call: _e.mock.On("DeleteLike", ctx, model, like)}
}

func (_c *RepoV1Interface_DeleteLike_Call) Run(run func(ctx context.Context, model models.Post, like entities.Like)) *RepoV1Interface_DeleteLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Post), args[2].(entities.Like))
	})
	return _c
}

func (_c *RepoV1Interface_DeleteLike_Call) Return(_a0 error) *RepoV1Interface_DeleteLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_DeleteLike_Call) RunAndReturn(run func(context.Context, models.Post, entities.Like) error) *RepoV1Interface_DeleteLike_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) DeletePost(ctx context.Context, model models.Post) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Post) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type RepoV1Interface_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Post
func (_e *RepoV1Interface_Expecter) DeletePost(ctx interface{}, model interface{}) *RepoV1Interface_DeletePost_Call {
	return &RepoV1Interface_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, model)}
}

func (_c *RepoV1Interface_DeletePost_Call) Run(run func(ctx context.Context, model models.Post)) *RepoV1Interface_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Post))
	})
	return _c
}

func (_c *RepoV1Interface_DeletePost_Call) Return(_a0 error) *RepoV1Interface_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_DeletePost_Call) RunAndReturn(run func(context.Context, models.Post) error) *RepoV1Interface_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserById provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) DeleteUserById(ctx context.Context, model models.User) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_DeleteUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserById'
type RepoV1Interface_DeleteUserById_Call struct {
	*mock.Call
}

// DeleteUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.User
func (_e *RepoV1Interface_Expecter) DeleteUserById(ctx interface{}, model interface{}) *RepoV1Interface_DeleteUserById_Call {
	return &RepoV1Interface_DeleteUserById_Call{Call: _e.mock.On("DeleteUserById", ctx, model)}
}

func (_c *RepoV1Interface_DeleteUserById_Call) Run(run func(ctx context.Context, model models.User)) *RepoV1Interface_DeleteUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *RepoV1Interface_DeleteUserById_Call) Return(_a0 error) *RepoV1Interface_DeleteUserById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_DeleteUserById_Call) RunAndReturn(run func(context.Context, models.User) error) *RepoV1Interface_DeleteUserById_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsersByEmail provides a mock function with given fields: ctx, email, userId, model
func (_m *RepoV1Interface) FindUsersByEmail(ctx context.Context, email string, userId int32, model *[]models.User) error {
	ret := _m.Called(ctx, email, userId, model)

	if len(ret) == 0 {
		panic("no return value specified for FindUsersByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, *[]models.User) error); ok {
		r0 = rf(ctx, email, userId, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_FindUsersByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsersByEmail'
type RepoV1Interface_FindUsersByEmail_Call struct {
	*mock.Call
}

// FindUsersByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - userId int32
//   - model *[]models.User
func (_e *RepoV1Interface_Expecter) FindUsersByEmail(ctx interface{}, email interface{}, userId interface{}, model interface{}) *RepoV1Interface_FindUsersByEmail_Call {
	return &RepoV1Interface_FindUsersByEmail_Call{Call: _e.mock.On("FindUsersByEmail", ctx, email, userId, model)}
}

func (_c *RepoV1Interface_FindUsersByEmail_Call) Run(run func(ctx context.Context, email string, userId int32, model *[]models.User)) *RepoV1Interface_FindUsersByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32), args[3].(*[]models.User))
	})
	return _c
}

func (_c *RepoV1Interface_FindUsersByEmail_Call) Return(_a0 error) *RepoV1Interface_FindUsersByEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_FindUsersByEmail_Call) RunAndReturn(run func(context.Context, string, int32, *[]models.User) error) *RepoV1Interface_FindUsersByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFriendRequest provides a mock function with given fields: ctx, id, model
func (_m *RepoV1Interface) GetAllFriendRequest(ctx context.Context, id int32, model *[]entities.GetAllFriendRequestResponse) error {
	ret := _m.Called(ctx, id, model)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, *[]entities.GetAllFriendRequestResponse) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_GetAllFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFriendRequest'
type RepoV1Interface_GetAllFriendRequest_Call struct {
	*mock.Call
}

// GetAllFriendRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
//   - model *[]entities.GetAllFriendRequestResponse
func (_e *RepoV1Interface_Expecter) GetAllFriendRequest(ctx interface{}, id interface{}, model interface{}) *RepoV1Interface_GetAllFriendRequest_Call {
	return &RepoV1Interface_GetAllFriendRequest_Call{Call: _e.mock.On("GetAllFriendRequest", ctx, id, model)}
}

func (_c *RepoV1Interface_GetAllFriendRequest_Call) Run(run func(ctx context.Context, id int32, model *[]entities.GetAllFriendRequestResponse)) *RepoV1Interface_GetAllFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(*[]entities.GetAllFriendRequestResponse))
	})
	return _c
}

func (_c *RepoV1Interface_GetAllFriendRequest_Call) Return(_a0 error) *RepoV1Interface_GetAllFriendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_GetAllFriendRequest_Call) RunAndReturn(run func(context.Context, int32, *[]entities.GetAllFriendRequestResponse) error) *RepoV1Interface_GetAllFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllPostFromUser provides a mock function with given fields: ctx, userId, model
func (_m *RepoV1Interface) ListAllPostFromUser(ctx context.Context, userId int32, model *[]entities.ListAllPostFromUserResponse) error {
	ret := _m.Called(ctx, userId, model)

	if len(ret) == 0 {
		panic("no return value specified for ListAllPostFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, *[]entities.ListAllPostFromUserResponse) error); ok {
		r0 = rf(ctx, userId, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_ListAllPostFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllPostFromUser'
type RepoV1Interface_ListAllPostFromUser_Call struct {
	*mock.Call
}

// ListAllPostFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int32
//   - model *[]entities.ListAllPostFromUserResponse
func (_e *RepoV1Interface_Expecter) ListAllPostFromUser(ctx interface{}, userId interface{}, model interface{}) *RepoV1Interface_ListAllPostFromUser_Call {
	return &RepoV1Interface_ListAllPostFromUser_Call{Call: _e.mock.On("ListAllPostFromUser", ctx, userId, model)}
}

func (_c *RepoV1Interface_ListAllPostFromUser_Call) Run(run func(ctx context.Context, userId int32, model *[]entities.ListAllPostFromUserResponse)) *RepoV1Interface_ListAllPostFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(*[]entities.ListAllPostFromUserResponse))
	})
	return _c
}

func (_c *RepoV1Interface_ListAllPostFromUser_Call) Return(_a0 error) *RepoV1Interface_ListAllPostFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_ListAllPostFromUser_Call) RunAndReturn(run func(context.Context, int32, *[]entities.ListAllPostFromUserResponse) error) *RepoV1Interface_ListAllPostFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListFriend provides a mock function with given fields: ctx, id, model
func (_m *RepoV1Interface) ListFriend(ctx context.Context, id int32, model *[]entities.ListFriendQuery) error {
	ret := _m.Called(ctx, id, model)

	if len(ret) == 0 {
		panic("no return value specified for ListFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, *[]entities.ListFriendQuery) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_ListFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFriend'
type RepoV1Interface_ListFriend_Call struct {
	*mock.Call
}

// ListFriend is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
//   - model *[]entities.ListFriendQuery
func (_e *RepoV1Interface_Expecter) ListFriend(ctx interface{}, id interface{}, model interface{}) *RepoV1Interface_ListFriend_Call {
	return &RepoV1Interface_ListFriend_Call{Call: _e.mock.On("ListFriend", ctx, id, model)}
}

func (_c *RepoV1Interface_ListFriend_Call) Run(run func(ctx context.Context, id int32, model *[]entities.ListFriendQuery)) *RepoV1Interface_ListFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(*[]entities.ListFriendQuery))
	})
	return _c
}

func (_c *RepoV1Interface_ListFriend_Call) Return(_a0 error) *RepoV1Interface_ListFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_ListFriend_Call) RunAndReturn(run func(context.Context, int32, *[]entities.ListFriendQuery) error) *RepoV1Interface_ListFriend_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPostByPostId provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) ReadPostByPostId(ctx context.Context, model *entities.ReadPostByPostIdResponse) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for ReadPostByPostId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ReadPostByPostIdResponse) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_ReadPostByPostId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPostByPostId'
type RepoV1Interface_ReadPostByPostId_Call struct {
	*mock.Call
}

// ReadPostByPostId is a helper method to define mock.On call
//   - ctx context.Context
//   - model *entities.ReadPostByPostIdResponse
func (_e *RepoV1Interface_Expecter) ReadPostByPostId(ctx interface{}, model interface{}) *RepoV1Interface_ReadPostByPostId_Call {
	return &RepoV1Interface_ReadPostByPostId_Call{Call: _e.mock.On("ReadPostByPostId", ctx, model)}
}

func (_c *RepoV1Interface_ReadPostByPostId_Call) Run(run func(ctx context.Context, model *entities.ReadPostByPostIdResponse)) *RepoV1Interface_ReadPostByPostId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.ReadPostByPostIdResponse))
	})
	return _c
}

func (_c *RepoV1Interface_ReadPostByPostId_Call) Return(_a0 error) *RepoV1Interface_ReadPostByPostId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_ReadPostByPostId_Call) RunAndReturn(run func(context.Context, *entities.ReadPostByPostIdResponse) error) *RepoV1Interface_ReadPostByPostId_Call {
	_c.Call.Return(run)
	return _c
}

// ReadUsersByEmail provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) ReadUsersByEmail(ctx context.Context, model *models.User) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for ReadUsersByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_ReadUsersByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadUsersByEmail'
type RepoV1Interface_ReadUsersByEmail_Call struct {
	*mock.Call
}

// ReadUsersByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.User
func (_e *RepoV1Interface_Expecter) ReadUsersByEmail(ctx interface{}, model interface{}) *RepoV1Interface_ReadUsersByEmail_Call {
	return &RepoV1Interface_ReadUsersByEmail_Call{Call: _e.mock.On("ReadUsersByEmail", ctx, model)}
}

func (_c *RepoV1Interface_ReadUsersByEmail_Call) Run(run func(ctx context.Context, model *models.User)) *RepoV1Interface_ReadUsersByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *RepoV1Interface_ReadUsersByEmail_Call) Return(_a0 error) *RepoV1Interface_ReadUsersByEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_ReadUsersByEmail_Call) RunAndReturn(run func(context.Context, *models.User) error) *RepoV1Interface_ReadUsersByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ReadUsersById provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) ReadUsersById(ctx context.Context, model *models.User) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for ReadUsersById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_ReadUsersById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadUsersById'
type RepoV1Interface_ReadUsersById_Call struct {
	*mock.Call
}

// ReadUsersById is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.User
func (_e *RepoV1Interface_Expecter) ReadUsersById(ctx interface{}, model interface{}) *RepoV1Interface_ReadUsersById_Call {
	return &RepoV1Interface_ReadUsersById_Call{Call: _e.mock.On("ReadUsersById", ctx, model)}
}

func (_c *RepoV1Interface_ReadUsersById_Call) Run(run func(ctx context.Context, model *models.User)) *RepoV1Interface_ReadUsersById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *RepoV1Interface_ReadUsersById_Call) Return(_a0 error) *RepoV1Interface_ReadUsersById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_ReadUsersById_Call) RunAndReturn(run func(context.Context, *models.User) error) *RepoV1Interface_ReadUsersById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFriendRequestStatus provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) UpdateFriendRequestStatus(ctx context.Context, model models.Friend) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFriendRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Friend) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_UpdateFriendRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFriendRequestStatus'
type RepoV1Interface_UpdateFriendRequestStatus_Call struct {
	*mock.Call
}

// UpdateFriendRequestStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Friend
func (_e *RepoV1Interface_Expecter) UpdateFriendRequestStatus(ctx interface{}, model interface{}) *RepoV1Interface_UpdateFriendRequestStatus_Call {
	return &RepoV1Interface_UpdateFriendRequestStatus_Call{Call: _e.mock.On("UpdateFriendRequestStatus", ctx, model)}
}

func (_c *RepoV1Interface_UpdateFriendRequestStatus_Call) Run(run func(ctx context.Context, model models.Friend)) *RepoV1Interface_UpdateFriendRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Friend))
	})
	return _c
}

func (_c *RepoV1Interface_UpdateFriendRequestStatus_Call) Return(_a0 error) *RepoV1Interface_UpdateFriendRequestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_UpdateFriendRequestStatus_Call) RunAndReturn(run func(context.Context, models.Friend) error) *RepoV1Interface_UpdateFriendRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLike provides a mock function with given fields: ctx, model, like
func (_m *RepoV1Interface) UpdateLike(ctx context.Context, model models.Post, like entities.Like) error {
	ret := _m.Called(ctx, model, like)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Post, entities.Like) error); ok {
		r0 = rf(ctx, model, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_UpdateLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLike'
type RepoV1Interface_UpdateLike_Call struct {
	*mock.Call
}

// UpdateLike is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Post
//   - like entities.Like
func (_e *RepoV1Interface_Expecter) UpdateLike(ctx interface{}, model interface{}, like interface{}) *RepoV1Interface_UpdateLike_Call {
	return &RepoV1Interface_UpdateLike_Call{Call: _e.mock.On("UpdateLike", ctx, model, like)}
}

func (_c *RepoV1Interface_UpdateLike_Call) Run(run func(ctx context.Context, model models.Post, like entities.Like)) *RepoV1Interface_UpdateLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Post), args[2].(entities.Like))
	})
	return _c
}

func (_c *RepoV1Interface_UpdateLike_Call) Return(_a0 error) *RepoV1Interface_UpdateLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_UpdateLike_Call) RunAndReturn(run func(context.Context, models.Post, entities.Like) error) *RepoV1Interface_UpdateLike_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePostData provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) UpdatePostData(ctx context.Context, model models.Post) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Post) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_UpdatePostData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePostData'
type RepoV1Interface_UpdatePostData_Call struct {
	*mock.Call
}

// UpdatePostData is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.Post
func (_e *RepoV1Interface_Expecter) UpdatePostData(ctx interface{}, model interface{}) *RepoV1Interface_UpdatePostData_Call {
	return &RepoV1Interface_UpdatePostData_Call{Call: _e.mock.On("UpdatePostData", ctx, model)}
}

func (_c *RepoV1Interface_UpdatePostData_Call) Run(run func(ctx context.Context, model models.Post)) *RepoV1Interface_UpdatePostData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Post))
	})
	return _c
}

func (_c *RepoV1Interface_UpdatePostData_Call) Return(_a0 error) *RepoV1Interface_UpdatePostData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_UpdatePostData_Call) RunAndReturn(run func(context.Context, models.Post) error) *RepoV1Interface_UpdatePostData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUsers provides a mock function with given fields: ctx, model
func (_m *RepoV1Interface) UpdateUsers(ctx context.Context, model models.User) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepoV1Interface_UpdateUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUsers'
type RepoV1Interface_UpdateUsers_Call struct {
	*mock.Call
}

// UpdateUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - model models.User
func (_e *RepoV1Interface_Expecter) UpdateUsers(ctx interface{}, model interface{}) *RepoV1Interface_UpdateUsers_Call {
	return &RepoV1Interface_UpdateUsers_Call{Call: _e.mock.On("UpdateUsers", ctx, model)}
}

func (_c *RepoV1Interface_UpdateUsers_Call) Run(run func(ctx context.Context, model models.User)) *RepoV1Interface_UpdateUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *RepoV1Interface_UpdateUsers_Call) Return(_a0 error) *RepoV1Interface_UpdateUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoV1Interface_UpdateUsers_Call) RunAndReturn(run func(context.Context, models.User) error) *RepoV1Interface_UpdateUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoV1Interface creates a new instance of RepoV1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoV1Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoV1Interface {
	mock := &RepoV1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
