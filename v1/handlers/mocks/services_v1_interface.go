// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "sns-barko/v1/entities"

	mock "github.com/stretchr/testify/mock"
)

// ServicesV1Interface is an autogenerated mock type for the servicesV1Interface type
type ServicesV1Interface struct {
	mock.Mock
}

type ServicesV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServicesV1Interface) EXPECT() *ServicesV1Interface_Expecter {
	return &ServicesV1Interface_Expecter{mock: &_m.Mock}
}

// AddLike provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) AddLike(ctx context.Context, req entities.AddLikeRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.AddLikeRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_AddLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLike'
type ServicesV1Interface_AddLike_Call struct {
	*mock.Call
}

// AddLike is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.AddLikeRequest
func (_e *ServicesV1Interface_Expecter) AddLike(ctx interface{}, req interface{}) *ServicesV1Interface_AddLike_Call {
	return &ServicesV1Interface_AddLike_Call{Call: _e.mock.On("AddLike", ctx, req)}
}

func (_c *ServicesV1Interface_AddLike_Call) Run(run func(ctx context.Context, req entities.AddLikeRequest)) *ServicesV1Interface_AddLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.AddLikeRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_AddLike_Call) Return(_a0 error) *ServicesV1Interface_AddLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_AddLike_Call) RunAndReturn(run func(context.Context, entities.AddLikeRequest) error) *ServicesV1Interface_AddLike_Call {
	_c.Call.Return(run)
	return _c
}

// AuthUser provides a mock function with given fields: ctx, req, resp
func (_m *ServicesV1Interface) AuthUser(ctx context.Context, req entities.AuthUserRequest, resp *entities.AuthUserResponse) error {
	ret := _m.Called(ctx, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for AuthUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.AuthUserRequest, *entities.AuthUserResponse) error); ok {
		r0 = rf(ctx, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_AuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthUser'
type ServicesV1Interface_AuthUser_Call struct {
	*mock.Call
}

// AuthUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.AuthUserRequest
//   - resp *entities.AuthUserResponse
func (_e *ServicesV1Interface_Expecter) AuthUser(ctx interface{}, req interface{}, resp interface{}) *ServicesV1Interface_AuthUser_Call {
	return &ServicesV1Interface_AuthUser_Call{Call: _e.mock.On("AuthUser", ctx, req, resp)}
}

func (_c *ServicesV1Interface_AuthUser_Call) Run(run func(ctx context.Context, req entities.AuthUserRequest, resp *entities.AuthUserResponse)) *ServicesV1Interface_AuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.AuthUserRequest), args[2].(*entities.AuthUserResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_AuthUser_Call) Return(_a0 error) *ServicesV1Interface_AuthUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_AuthUser_Call) RunAndReturn(run func(context.Context, entities.AuthUserRequest, *entities.AuthUserResponse) error) *ServicesV1Interface_AuthUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFriendRequest provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) CreateFriendRequest(ctx context.Context, req entities.CreateFriendRequestRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CreateFriendRequestRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_CreateFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFriendRequest'
type ServicesV1Interface_CreateFriendRequest_Call struct {
	*mock.Call
}

// CreateFriendRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.CreateFriendRequestRequest
func (_e *ServicesV1Interface_Expecter) CreateFriendRequest(ctx interface{}, req interface{}) *ServicesV1Interface_CreateFriendRequest_Call {
	return &ServicesV1Interface_CreateFriendRequest_Call{Call: _e.mock.On("CreateFriendRequest", ctx, req)}
}

func (_c *ServicesV1Interface_CreateFriendRequest_Call) Run(run func(ctx context.Context, req entities.CreateFriendRequestRequest)) *ServicesV1Interface_CreateFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.CreateFriendRequestRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_CreateFriendRequest_Call) Return(_a0 error) *ServicesV1Interface_CreateFriendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_CreateFriendRequest_Call) RunAndReturn(run func(context.Context, entities.CreateFriendRequestRequest) error) *ServicesV1Interface_CreateFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) CreatePost(ctx context.Context, req entities.CreatePostRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CreatePostRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type ServicesV1Interface_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.CreatePostRequest
func (_e *ServicesV1Interface_Expecter) CreatePost(ctx interface{}, req interface{}) *ServicesV1Interface_CreatePost_Call {
	return &ServicesV1Interface_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, req)}
}

func (_c *ServicesV1Interface_CreatePost_Call) Run(run func(ctx context.Context, req entities.CreatePostRequest)) *ServicesV1Interface_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.CreatePostRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_CreatePost_Call) Return(_a0 error) *ServicesV1Interface_CreatePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_CreatePost_Call) RunAndReturn(run func(context.Context, entities.CreatePostRequest) error) *ServicesV1Interface_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) CreateUser(ctx context.Context, req entities.CreateUserRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.CreateUserRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type ServicesV1Interface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.CreateUserRequest
func (_e *ServicesV1Interface_Expecter) CreateUser(ctx interface{}, req interface{}) *ServicesV1Interface_CreateUser_Call {
	return &ServicesV1Interface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, req)}
}

func (_c *ServicesV1Interface_CreateUser_Call) Run(run func(ctx context.Context, req entities.CreateUserRequest)) *ServicesV1Interface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.CreateUserRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_CreateUser_Call) Return(_a0 error) *ServicesV1Interface_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_CreateUser_Call) RunAndReturn(run func(context.Context, entities.CreateUserRequest) error) *ServicesV1Interface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFriend provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) DeleteFriend(ctx context.Context, req entities.DeleteFriendRequestRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.DeleteFriendRequestRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_DeleteFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFriend'
type ServicesV1Interface_DeleteFriend_Call struct {
	*mock.Call
}

// DeleteFriend is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.DeleteFriendRequestRequest
func (_e *ServicesV1Interface_Expecter) DeleteFriend(ctx interface{}, req interface{}) *ServicesV1Interface_DeleteFriend_Call {
	return &ServicesV1Interface_DeleteFriend_Call{Call: _e.mock.On("DeleteFriend", ctx, req)}
}

func (_c *ServicesV1Interface_DeleteFriend_Call) Run(run func(ctx context.Context, req entities.DeleteFriendRequestRequest)) *ServicesV1Interface_DeleteFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.DeleteFriendRequestRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_DeleteFriend_Call) Return(_a0 error) *ServicesV1Interface_DeleteFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_DeleteFriend_Call) RunAndReturn(run func(context.Context, entities.DeleteFriendRequestRequest) error) *ServicesV1Interface_DeleteFriend_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLike provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) DeleteLike(ctx context.Context, req entities.DeleteLikeRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.DeleteLikeRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_DeleteLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLike'
type ServicesV1Interface_DeleteLike_Call struct {
	*mock.Call
}

// DeleteLike is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.DeleteLikeRequest
func (_e *ServicesV1Interface_Expecter) DeleteLike(ctx interface{}, req interface{}) *ServicesV1Interface_DeleteLike_Call {
	return &ServicesV1Interface_DeleteLike_Call{Call: _e.mock.On("DeleteLike", ctx, req)}
}

func (_c *ServicesV1Interface_DeleteLike_Call) Run(run func(ctx context.Context, req entities.DeleteLikeRequest)) *ServicesV1Interface_DeleteLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.DeleteLikeRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_DeleteLike_Call) Return(_a0 error) *ServicesV1Interface_DeleteLike_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_DeleteLike_Call) RunAndReturn(run func(context.Context, entities.DeleteLikeRequest) error) *ServicesV1Interface_DeleteLike_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePost provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) DeletePost(ctx context.Context, req entities.DeletePostRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.DeletePostRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type ServicesV1Interface_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.DeletePostRequest
func (_e *ServicesV1Interface_Expecter) DeletePost(ctx interface{}, req interface{}) *ServicesV1Interface_DeletePost_Call {
	return &ServicesV1Interface_DeletePost_Call{Call: _e.mock.On("DeletePost", ctx, req)}
}

func (_c *ServicesV1Interface_DeletePost_Call) Run(run func(ctx context.Context, req entities.DeletePostRequest)) *ServicesV1Interface_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.DeletePostRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_DeletePost_Call) Return(_a0 error) *ServicesV1Interface_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_DeletePost_Call) RunAndReturn(run func(context.Context, entities.DeletePostRequest) error) *ServicesV1Interface_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) DeleteUser(ctx context.Context, req entities.DeleteUserRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.DeleteUserRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type ServicesV1Interface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.DeleteUserRequest
func (_e *ServicesV1Interface_Expecter) DeleteUser(ctx interface{}, req interface{}) *ServicesV1Interface_DeleteUser_Call {
	return &ServicesV1Interface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, req)}
}

func (_c *ServicesV1Interface_DeleteUser_Call) Run(run func(ctx context.Context, req entities.DeleteUserRequest)) *ServicesV1Interface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.DeleteUserRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_DeleteUser_Call) Return(_a0 error) *ServicesV1Interface_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_DeleteUser_Call) RunAndReturn(run func(context.Context, entities.DeleteUserRequest) error) *ServicesV1Interface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUsersByEmail provides a mock function with given fields: ctx, userId, req, resp
func (_m *ServicesV1Interface) FindUsersByEmail(ctx context.Context, userId int32, req entities.FindUserByEmailRequest, resp *[]entities.FindUserByEmailResponse) error {
	ret := _m.Called(ctx, userId, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for FindUsersByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, entities.FindUserByEmailRequest, *[]entities.FindUserByEmailResponse) error); ok {
		r0 = rf(ctx, userId, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_FindUsersByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUsersByEmail'
type ServicesV1Interface_FindUsersByEmail_Call struct {
	*mock.Call
}

// FindUsersByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int32
//   - req entities.FindUserByEmailRequest
//   - resp *[]entities.FindUserByEmailResponse
func (_e *ServicesV1Interface_Expecter) FindUsersByEmail(ctx interface{}, userId interface{}, req interface{}, resp interface{}) *ServicesV1Interface_FindUsersByEmail_Call {
	return &ServicesV1Interface_FindUsersByEmail_Call{Call: _e.mock.On("FindUsersByEmail", ctx, userId, req, resp)}
}

func (_c *ServicesV1Interface_FindUsersByEmail_Call) Run(run func(ctx context.Context, userId int32, req entities.FindUserByEmailRequest, resp *[]entities.FindUserByEmailResponse)) *ServicesV1Interface_FindUsersByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(entities.FindUserByEmailRequest), args[3].(*[]entities.FindUserByEmailResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_FindUsersByEmail_Call) Return(_a0 error) *ServicesV1Interface_FindUsersByEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_FindUsersByEmail_Call) RunAndReturn(run func(context.Context, int32, entities.FindUserByEmailRequest, *[]entities.FindUserByEmailResponse) error) *ServicesV1Interface_FindUsersByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFriendRequest provides a mock function with given fields: ctx, req, resp
func (_m *ServicesV1Interface) GetAllFriendRequest(ctx context.Context, req entities.GetAllFriendRequestRequest, resp *[]entities.GetAllFriendRequestResponse) error {
	ret := _m.Called(ctx, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.GetAllFriendRequestRequest, *[]entities.GetAllFriendRequestResponse) error); ok {
		r0 = rf(ctx, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_GetAllFriendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFriendRequest'
type ServicesV1Interface_GetAllFriendRequest_Call struct {
	*mock.Call
}

// GetAllFriendRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.GetAllFriendRequestRequest
//   - resp *[]entities.GetAllFriendRequestResponse
func (_e *ServicesV1Interface_Expecter) GetAllFriendRequest(ctx interface{}, req interface{}, resp interface{}) *ServicesV1Interface_GetAllFriendRequest_Call {
	return &ServicesV1Interface_GetAllFriendRequest_Call{Call: _e.mock.On("GetAllFriendRequest", ctx, req, resp)}
}

func (_c *ServicesV1Interface_GetAllFriendRequest_Call) Run(run func(ctx context.Context, req entities.GetAllFriendRequestRequest, resp *[]entities.GetAllFriendRequestResponse)) *ServicesV1Interface_GetAllFriendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.GetAllFriendRequestRequest), args[2].(*[]entities.GetAllFriendRequestResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_GetAllFriendRequest_Call) Return(_a0 error) *ServicesV1Interface_GetAllFriendRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_GetAllFriendRequest_Call) RunAndReturn(run func(context.Context, entities.GetAllFriendRequestRequest, *[]entities.GetAllFriendRequestResponse) error) *ServicesV1Interface_GetAllFriendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllPostFromUser provides a mock function with given fields: ctx, req, resp
func (_m *ServicesV1Interface) ListAllPostFromUser(ctx context.Context, req entities.ListAllPostFromUserRequest, resp *[]entities.ListAllPostFromUserResponse) error {
	ret := _m.Called(ctx, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for ListAllPostFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ListAllPostFromUserRequest, *[]entities.ListAllPostFromUserResponse) error); ok {
		r0 = rf(ctx, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_ListAllPostFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllPostFromUser'
type ServicesV1Interface_ListAllPostFromUser_Call struct {
	*mock.Call
}

// ListAllPostFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.ListAllPostFromUserRequest
//   - resp *[]entities.ListAllPostFromUserResponse
func (_e *ServicesV1Interface_Expecter) ListAllPostFromUser(ctx interface{}, req interface{}, resp interface{}) *ServicesV1Interface_ListAllPostFromUser_Call {
	return &ServicesV1Interface_ListAllPostFromUser_Call{Call: _e.mock.On("ListAllPostFromUser", ctx, req, resp)}
}

func (_c *ServicesV1Interface_ListAllPostFromUser_Call) Run(run func(ctx context.Context, req entities.ListAllPostFromUserRequest, resp *[]entities.ListAllPostFromUserResponse)) *ServicesV1Interface_ListAllPostFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.ListAllPostFromUserRequest), args[2].(*[]entities.ListAllPostFromUserResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_ListAllPostFromUser_Call) Return(_a0 error) *ServicesV1Interface_ListAllPostFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_ListAllPostFromUser_Call) RunAndReturn(run func(context.Context, entities.ListAllPostFromUserRequest, *[]entities.ListAllPostFromUserResponse) error) *ServicesV1Interface_ListAllPostFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListFriend provides a mock function with given fields: ctx, req, resp
func (_m *ServicesV1Interface) ListFriend(ctx context.Context, req entities.ListFriendRequest, resp *[]entities.ListFriendResponse) error {
	ret := _m.Called(ctx, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for ListFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ListFriendRequest, *[]entities.ListFriendResponse) error); ok {
		r0 = rf(ctx, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_ListFriend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFriend'
type ServicesV1Interface_ListFriend_Call struct {
	*mock.Call
}

// ListFriend is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.ListFriendRequest
//   - resp *[]entities.ListFriendResponse
func (_e *ServicesV1Interface_Expecter) ListFriend(ctx interface{}, req interface{}, resp interface{}) *ServicesV1Interface_ListFriend_Call {
	return &ServicesV1Interface_ListFriend_Call{Call: _e.mock.On("ListFriend", ctx, req, resp)}
}

func (_c *ServicesV1Interface_ListFriend_Call) Run(run func(ctx context.Context, req entities.ListFriendRequest, resp *[]entities.ListFriendResponse)) *ServicesV1Interface_ListFriend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.ListFriendRequest), args[2].(*[]entities.ListFriendResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_ListFriend_Call) Return(_a0 error) *ServicesV1Interface_ListFriend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_ListFriend_Call) RunAndReturn(run func(context.Context, entities.ListFriendRequest, *[]entities.ListFriendResponse) error) *ServicesV1Interface_ListFriend_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPostByPostId provides a mock function with given fields: ctx, req, resp
func (_m *ServicesV1Interface) ReadPostByPostId(ctx context.Context, req entities.ReadPostByPostIdRequest, resp *entities.ReadPostByPostIdResponse) error {
	ret := _m.Called(ctx, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for ReadPostByPostId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ReadPostByPostIdRequest, *entities.ReadPostByPostIdResponse) error); ok {
		r0 = rf(ctx, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_ReadPostByPostId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPostByPostId'
type ServicesV1Interface_ReadPostByPostId_Call struct {
	*mock.Call
}

// ReadPostByPostId is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.ReadPostByPostIdRequest
//   - resp *entities.ReadPostByPostIdResponse
func (_e *ServicesV1Interface_Expecter) ReadPostByPostId(ctx interface{}, req interface{}, resp interface{}) *ServicesV1Interface_ReadPostByPostId_Call {
	return &ServicesV1Interface_ReadPostByPostId_Call{Call: _e.mock.On("ReadPostByPostId", ctx, req, resp)}
}

func (_c *ServicesV1Interface_ReadPostByPostId_Call) Run(run func(ctx context.Context, req entities.ReadPostByPostIdRequest, resp *entities.ReadPostByPostIdResponse)) *ServicesV1Interface_ReadPostByPostId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.ReadPostByPostIdRequest), args[2].(*entities.ReadPostByPostIdResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_ReadPostByPostId_Call) Return(_a0 error) *ServicesV1Interface_ReadPostByPostId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_ReadPostByPostId_Call) RunAndReturn(run func(context.Context, entities.ReadPostByPostIdRequest, *entities.ReadPostByPostIdResponse) error) *ServicesV1Interface_ReadPostByPostId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFriendRequestStatus provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) UpdateFriendRequestStatus(ctx context.Context, req entities.UpdateFriendRequestStatusRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFriendRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.UpdateFriendRequestStatusRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_UpdateFriendRequestStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFriendRequestStatus'
type ServicesV1Interface_UpdateFriendRequestStatus_Call struct {
	*mock.Call
}

// UpdateFriendRequestStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.UpdateFriendRequestStatusRequest
func (_e *ServicesV1Interface_Expecter) UpdateFriendRequestStatus(ctx interface{}, req interface{}) *ServicesV1Interface_UpdateFriendRequestStatus_Call {
	return &ServicesV1Interface_UpdateFriendRequestStatus_Call{Call: _e.mock.On("UpdateFriendRequestStatus", ctx, req)}
}

func (_c *ServicesV1Interface_UpdateFriendRequestStatus_Call) Run(run func(ctx context.Context, req entities.UpdateFriendRequestStatusRequest)) *ServicesV1Interface_UpdateFriendRequestStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.UpdateFriendRequestStatusRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_UpdateFriendRequestStatus_Call) Return(_a0 error) *ServicesV1Interface_UpdateFriendRequestStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_UpdateFriendRequestStatus_Call) RunAndReturn(run func(context.Context, entities.UpdateFriendRequestStatusRequest) error) *ServicesV1Interface_UpdateFriendRequestStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePostData provides a mock function with given fields: ctx, req
func (_m *ServicesV1Interface) UpdatePostData(ctx context.Context, req entities.UpdatePostRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePostData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.UpdatePostRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_UpdatePostData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePostData'
type ServicesV1Interface_UpdatePostData_Call struct {
	*mock.Call
}

// UpdatePostData is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.UpdatePostRequest
func (_e *ServicesV1Interface_Expecter) UpdatePostData(ctx interface{}, req interface{}) *ServicesV1Interface_UpdatePostData_Call {
	return &ServicesV1Interface_UpdatePostData_Call{Call: _e.mock.On("UpdatePostData", ctx, req)}
}

func (_c *ServicesV1Interface_UpdatePostData_Call) Run(run func(ctx context.Context, req entities.UpdatePostRequest)) *ServicesV1Interface_UpdatePostData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.UpdatePostRequest))
	})
	return _c
}

func (_c *ServicesV1Interface_UpdatePostData_Call) Return(_a0 error) *ServicesV1Interface_UpdatePostData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_UpdatePostData_Call) RunAndReturn(run func(context.Context, entities.UpdatePostRequest) error) *ServicesV1Interface_UpdatePostData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, req, resp
func (_m *ServicesV1Interface) UpdateUser(ctx context.Context, req entities.UpdateUserRequest, resp *entities.UpdateUserResponse) error {
	ret := _m.Called(ctx, req, resp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.UpdateUserRequest, *entities.UpdateUserResponse) error); ok {
		r0 = rf(ctx, req, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServicesV1Interface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type ServicesV1Interface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req entities.UpdateUserRequest
//   - resp *entities.UpdateUserResponse
func (_e *ServicesV1Interface_Expecter) UpdateUser(ctx interface{}, req interface{}, resp interface{}) *ServicesV1Interface_UpdateUser_Call {
	return &ServicesV1Interface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, req, resp)}
}

func (_c *ServicesV1Interface_UpdateUser_Call) Run(run func(ctx context.Context, req entities.UpdateUserRequest, resp *entities.UpdateUserResponse)) *ServicesV1Interface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.UpdateUserRequest), args[2].(*entities.UpdateUserResponse))
	})
	return _c
}

func (_c *ServicesV1Interface_UpdateUser_Call) Return(_a0 error) *ServicesV1Interface_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServicesV1Interface_UpdateUser_Call) RunAndReturn(run func(context.Context, entities.UpdateUserRequest, *entities.UpdateUserResponse) error) *ServicesV1Interface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewServicesV1Interface creates a new instance of ServicesV1Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicesV1Interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServicesV1Interface {
	mock := &ServicesV1Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
